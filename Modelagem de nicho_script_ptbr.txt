Script modelagem de distribuição de espécies (SDM) no R

#Pacotes necessários para instalar
install.packages("raster")
install.packages("dismo")
install.packages("maptools")
install.packages("rgeos")
install.packages ("dplyr")
install.packages ("ggplot2")
install.packages ("sdmpredictors")
install.packages("leaflet")
install.packages("rJava")

#Carregar os pacotes
library(dismo)
library(dplyr)
library(ggplot2)

#Abrir a tabela de pontos, deixar os dados separados apenas por vírgula 
setwd('C:/Inserir o caminho') 

#Lendo dados de coordenadas e presença/ausência de um arquivo csv
pontos = read.csv("pon_presence.csv")

#Indicando quais colunas devem ser consideradas
pontos <- pontos[,1:2]

# Para confirmar se os pontos estão nos locais certos
library(maptools)

#Abrir um mapa do mundo a partir do pacote
data(wrld_simpl)

#Vamos definir os limites desse mapa
plot(wrld_simpl, xlim=c(-70,-30), ylim=c(-50,-10), axes=TRUE, col="light yellow")

# Para adicionar os pontos
points(pontos$LON, pontos$LAT, col='orange', pch=20, cex=0.75)

# Para adicionar uma borda vermelha nos pontos
points(pontos$LON, pontos$LAT, col='red', cex=0.75)

#Para incluir dados abióticos 
library(sdmpredictors)

# Para explorar quais dados temos nesse pacote
list_datasets()

# dataset_code terrestrial marine                              url
#1    WorldClim        TRUE  FALSE        http://www.worldclim.org/
#2   Bio-ORACLE       FALSE   TRUE           hhtp://bio-oracle.org/
#3      MARSPEC       FALSE   TRUE              http://marspec.org/
#4      ENVIREM        TRUE  FALSE       https://envirem.github.io/
#5   Freshwater        TRUE  FALSE https://www.earthenv.org/streams

#Para explorar quais camadas estão disponíveis
layers.bio2 <- list_layers( datasets="Bio-ORACLE" )

#Para fazer o download de camadas específicas em stacks
environment <- load_layers(c("BO_ph", "BO_bathymean", "BO21_salinitymean_bdmean", "BO21_tempmean_bdmean", "BO21_curvelmean_bdmean", "BO21_ppmean_bdmean"))

# Outra opção é informar a pasta de onde serão extraídos os arquivos
path <- file.path('Inserir o caminho')

#Selecionar apenas os arquivos em grd
files <- list.files(path, pattern='grd$', full.names=TRUE )

#Confirmar a estatística das camadas
layer_stats(layercodes = c("BO_ph", "BO_bathymean", "BO21_salinitymean_bdmean", "BO21_tempmean_bdmean", "BO21_curvelmean_bdmean", "BO21_ppmean_bdmean"))

#Confirmar a correlação de Pearson entre as camadas
layers_correlation(layercodes = c("BO_ph", "BO_bathymean", "BO21_salinitymean_bdmean", "BO21_tempmean_bdmean", "BO21_curvelmean_bdmean", "BO21_ppmean_bdmean"))

#Para verificar os preditores de cada stack
environment
plot(environment)

#Para definir os limites dos rasters, primeiro criamos um limite
pon_distribution <- extent(-70,-30, -50,-10) 

#Então recortamos o raster conforme o limite
environment.crop <- crop(environment, pon_distribution)
plot(environment.crop)

#Para verificar os pontos em relação aos rasters
plot(environment.crop,1)
points(pontos, col='red')

#Criar uma tabela apenas com as coordenadas para obter os valores dos preditores para os pontos
pon_presence <- pontos[,1:2]

#Para extrair os valores dos preditores para os pontos de ocorrência
vals <- extract(environment.crop, pon_presence)
set.seed(0)
backgr <- randomPoints(environment.crop, 500)
absvals <- extract(environment.crop, backgr)
pb <- c(rep(1, nrow(vals)), rep(0, nrow(absvals)))
sdmdata <- data.frame(cbind(pb, rbind(vals, absvals)))

#Para investigar a colinearidade dos dados
pairs(sdmdata[,2:7], cex=0.1)

#Precisamos escolher o modelo mais adequado. A maioria dos modelos tem um formula que
#identifica as variáveis dependentes e independentes e um data.frame com essas variáveis.
#Alguns algoritmos de modelos de distribuição, como o Bioclim e Domains, usam apenas dados de presença. 

#Bioclim
bc <- bioclim(vals[,c("BO_ph", "BO_bathymean", "BO21_salinitymean_bdmean", "BO21_tempmean_bdmean", "BO21_curvelmean_bdmean", "BO21_ppmean_bdmean")])

class(bc)
bc
pairs(bc)


#Mas outros modelos usam dados de ausência ou “background”. A regressão logística é o método clássico para análise de presença e ausência
#e geralmente é implementada no modelo linear generalizado (GLM). Mesmo apenas com dados de presença é possível utilizar um método que
#precisa dos dados de ausência, basta substituir pelos dados de background. Dados de background (e.g. Phillips et al. 2009) não tentam
#adivinhar os locais de ausência, mas caracterizam os ambientes da área de estudo. Os dados de background definem o domínio do
#ambiente enquanto os dados de presença determinam em quais condições a espécie provavelmente está presente. Os dados de background
#requerem menos suposições do que dados de pseudo-ausência, onde se assume em quais locais a espécie estaria ausente, além disso é possível
#usar métodos estatísticos para lidar com a sobreposição dos pontos de presença e do background (e.g. Ward et al. 2009; Phillips and Elith, 2011).

#A ideia é realizarmos uma regressão logística para cada variável, porém ao mesmo tempo.

#GLM
m1 <- glm(pb ~ BO_ph + BO_bathymean + BO21_salinitymean_bdmean + BO21_tempmean_bdmean + BO21_curvelmean_bdmean + BO21_ppmean_bdmean, data=sdmdata)
class(m1)
summary(m1)

m2 = glm(pb ~ ., data=sdmdata)
m2

#Podemos fazer predições para qualquer combinação dos valores das variáveis independentes. 
BO_ph = c(4, 8, 10 )
BO_bathymean = c(-10, 5, 10 )
BO21_salinitymean_bdmean = c(20, 30, 40)
BO21_tempmean_bdmean = c(10, 20, 30)
BO21_curvelmean_bdmean = c(0, 0.10, 0.20)
BO21_ppmean_bdmean = c(0, 0.15, 0.30)
pd = data.frame(cbind(BO_ph, BO_bathymean, BO21_salinitymean_bdmean, BO21_tempmean_bdmean, BO21_curvelmean_bdmean, BO21_ppmean_bdmean))
pd

#Vamos predizer em relação ao modelo glm
predict(m1, pd)

#Vamos predizer em relação ao modelo bioclim
predict(bc, pd)
response(bc)

#Vamos criar um mapa com valores de aptidão para o modelo glm
p <- predict(environment.crop, m1)
plot(p)

#Vamos criar um mapa com valores de aptidão para o modelo bioclim
p2 <- predict(environment.crop, bc)
plot(p2)

#Precisamos avaliar o modelo, verificar o quão sensível o modelo é ecologicamente, se as relações modeladas fazem sentido, se as
#predições parecem razoáveis e se existe algum padrão espacial nos resíduos do modelo. Alguns pesquisadores criam o modelo com um
#arquivo de treino e depois rodam o modelo com o arquivo de ocorrências. É possível avaliar os modelos se baseando em dados de
#presença/ausência ou apenas presença, mas esses são dependentes de um limite (limite para existir a presença). Para avaliarmos sem
#dependermos de um limite podemos utilizar a AUROC (Area Under the Receiver Operator Curve), basicamente calculamos a relação de
#verdadeiros positivos e falsos positivos conforme os limites que determinamos como, por exemplo, p=0,05. Em dados imparciais,
#uma AUC alta indica que locais com altos valores de adequação previstos tendem a ser áreas de presença conhecida e locais com valores
#de previsão de modelo mais baixos tendem a ser áreas onde a espécie não é conhecida por estar presente (ausente ou um ponto aleatório).
#Uma pontuação de AUC de 0,5 significa que o modelo é tão bom quanto uma estimativa aleatória.

#Vamos calcular com dados de treino e teste para o bioclim
samp <- sample(nrow(sdmdata), round(0.75 * nrow(sdmdata)))
traindata <- sdmdata[samp,]
traindata <- traindata[traindata[,1] == 1, 2:7]
testdata <- sdmdata[-samp,]
bc <- bioclim(traindata)
e <- evaluate(testdata[testdata==1,], testdata[testdata==0,], bc)
e

#Em projetos reais, devemos usar o particionamento de dados k-fold em vez de uma única amostra aleatória. A função de dismo kfold facilita
#esse tipo de particionamento de dados. Ele cria um vetor que atribui cada linha na matriz de dados a um grupo (entre 1 a k).
pres <- sdmdata[sdmdata[,1] == 1, 2:7]
back <- sdmdata[sdmdata[,1] == 0, 2:7]

#Os dados de background só serão usados no teste e por isso não precisamos particionar.
k <- 5
group <- kfold(pres, k)
group[1:10]

unique(group)

#Agora podemos testar e ajustar o modelo 5 vezes. Em cada corrida, um dos grupos de dado será usado para testar o modelo
#enquanto os outros quatro serão usados para ajustar o modelo.
e <- list()
for (i in 1:k) {
    train <- pres[group != i,]
    test <- pres[group == i,]
    bc <- bioclim(train)
    e[[i]] <- evaluate(p=test, a=back, bc)
}

#Vamos extrair os valores de AUC e o limite “máximo da soma da sensibilidade (taxa positiva verdadeira) e especificidade (taxa negativa verdadeira)”
#“spec_sens” (isso às vezes é usado como um limite para definir células para presença ou ausência).
auc <- sapply(e, function(x){x@auc})
auc

mean(auc)

sapply( e, function(x){ threshold(x)['spec_sens'] } )

#O uso de AUC na avaliação de modelos de distribuição de espécies tem sido criticado. Pois, os valores de AUC variam com a extensão espacial
#usada para selecionar pontos de background. Geralmente, quanto maior for essa extensão, maior será o valor de AUC. Portanto, os valores
#de AUC são geralmente tendenciosos e não podem ser comparados diretamente. Hijmans (2012) sugere que podemos remover o “viés de ordenação espacial”
#(a diferença entre a distância da presença de teste para a presença de treinamento e a distância de ausência de teste para pontos de presença de treinamento)
#por meio de “amostragem de distância pontual”.

set.seed(0)
backgr <- randomPoints(environment.crop, 500)
nr <- nrow(pon_presence)
s <- sample(nr, 0.25 * nr)
pres_train <- pon_presence[-s, ]
pres_test <- pon_presence[s, ]
nr <- nrow(backgr)
set.seed(9)
s <- sample(nr, 0.25 * nr)
back_train <- backgr[-s, ]
back_test <- backgr[s, ]
sb <- ssb(pres_test, back_test, pres_train)
sb[,1] / sb[,2]

#sb[,1] / sb[,2] é um indicador de viés de classificação espacial (SSB). Se não houver SSB este
#valor deve ser 1, dados próximos de zero indicam que o SSB é muito forte.

#Vamos criar uma subamostra em que o SSB é removido.
i <- pwdSample(pres_test, back_test, pres_train, n=1, tr=0.1)
pres_test_pwd <- pres_test[!is.na(i[,1]), ]
back_test_pwd <- back_test[na.omit(as.vector(i)), ]
sb2 <- ssb(pres_test_pwd, back_test_pwd, pres_train)
sb2[1]/ sb2[2]

bc <- bioclim(environment.crop, pres_train)
ev <- evaluate(bc, p=pres_test, a=back_test, x=environment.crop)
evaluate(bc, p=pres_test_pwd, a=back_test_pwd, x=environment.crop)

#Calculando o threshold
tr <- threshold(ev, 'spec_sens')
tr

# Vamos usar o RasterStack com variáveis preditoras para criar um RasterLayer de predições:
pbl <- predict(environment.crop, bc, ext= pon_distribution, progress='')
pbl
par(mfrow=c(1,2))
plot(pbl, main='Bioclim, raw values')
plot(pbl > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
